/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package rabbitmq.sasl;

import com.rabbitmq.client.*;
import nyla.solutions.core.io.IO;

import javax.net.ssl.KeyManagerFactory;
import javax.net.ssl.SSLContext;
import javax.net.ssl.TrustManagerFactory;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.security.KeyStore;

public class SaslApp
{

    private static String queueName = "java-sasl-queues";
    private static String username  = "gregoryg-a01.vmware.com";
    private static String password = "test1234";
    private static String keyStorePath = "";
    private static String trustStorePath = "/Users/Projects/solutions/integration/messaging/RabbitMQ/dev/java" +
            "-rabbitmq-showCase/app/src/main/scripts/client-truststore.pkcs12";
    private static String rootCertPath = "/Users/devtools/integration/messaging/rabbit/rabbit-devOps/tls-gen/basic/result/";
    public static final String clientKeyPath = rootCertPath + "/client_key.p12";
    private static String clientRootCertPath = "/Users/Projects/solutions/integration/messaging/RabbitMQ/dev/java-rabbitmq-sasl/certs/";

    public static void main(String[] args)
    {

        char[] keyPassphrase = password.toCharArray();

        System.setProperty("javax.net.debug","ssl:handshake:verbose");
        System.out.println("OUT:=============javax.net.ssl.trustStore="+System.getProperty("javax.net.ssl.trustStore"));

        String vhost = "/";

        try {
            if(!IO.exists(clientKeyPath))
                throw new FileNotFoundException(clientKeyPath);

            KeyStore ks = KeyStore.getInstance("PKCS12");
            ks.load(new FileInputStream(clientKeyPath), keyPassphrase);
            KeyManagerFactory kmf = KeyManagerFactory.getInstance("SunX509");
            kmf.init(ks, keyPassphrase);
            char[] trustPassphrase = "rabbitmq".toCharArray();
            KeyStore tks = KeyStore.getInstance("JKS");
            tks.load(new FileInputStream(clientRootCertPath+"rabbitstore"), trustPassphrase);
            TrustManagerFactory tmf = TrustManagerFactory.getInstance("SunX509");
            tmf.init(tks);
            SSLContext sslContext = SSLContext.getInstance("TLSv1.2");
            sslContext.init(kmf.getKeyManagers(), tmf.getTrustManagers(), null);
            ConnectionFactory factory = new ConnectionFactory();
            factory.setHost("localhost");
            factory.setUsername("gregoryg-a01.vmware.com");
            factory.setPort(5671);
//            factory.setUri("amqps://localhost:5671/");
            factory.setSaslConfig(DefaultSaslConfig.EXTERNAL);
            factory.useSslProtocol(sslContext);


//            Connection conn = factory.newConnection();
            Address [] addresses  ={ new Address("gregoryg-a01.vmware.com",5671)};
            Connection conn = factory.newConnection(addresses);
            Channel channel = conn.createChannel();
            channel.queueDeclare("rabbitmq-java-test", false, true, true, null);
            channel.basicPublish("", "rabbitmq-java-test", null, "Hello, World".getBytes());
            GetResponse chResponse = channel.basicGet("rabbitmq-java-test", false);
            if (chResponse == null) {
                System.out.println("No message retrieved");
            } else {
                byte[] body = chResponse.getBody();
                System.out.println("Received: " + new String(body));
            }
            channel.close();
            conn.close();
        }
        catch (Exception e) {
            e.printStackTrace();
        }

    }
}
